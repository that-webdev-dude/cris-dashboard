@import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@200;300;400;500;600;700;800;900&display=swap");

@import "./scss/variables";

/*
TOOLS
*/
@function pow($base, $exp) {
  $result: 1;
  @for $iter from 0 to $exp {
    $result: $result * $base;
  }
  @return $result;
}

@mixin typescale($base-size, $ratio) {
  h1,
  .display-1 {
    font-size: $base-size * pow($ratio, 5);
  }

  h2,
  .display-2 {
    font-size: $base-size * pow($ratio, 4);
  }

  h3,
  .display-3 {
    font-size: $base-size * pow($ratio, 3);
  }

  h4,
  .display-4 {
    font-size: $base-size * pow($ratio, 2);
  }

  h5,
  .display-5 {
    font-size: $base-size * pow($ratio, 1);
  }

  small,
  .small,
  .text-small,
  .display-small {
    font-size: calc($base-size / pow($ratio, 1));
  }
}

@mixin shades($color-value) {
  $shade: 10;
  @for $index from 1 to 7 {
    &.lighten-#{$shade} {
      background-color: lighten($color-value, $shade) !important;
    }
    &.darken-#{$shade} {
      background-color: darken($color-value, $shade) !important;
    }
    $shade: $shade + 5;
  }
}
@mixin text-shades($color-value) {
  $text-shade: 10;
  @for $index from 1 to 7 {
    &.text-lighten-#{$text-shade} {
      color: lighten($color-value, $text-shade) !important;
    }
    &.text-darken-#{$text-shade} {
      color: darken($color-value, $text-shade) !important;
    }
    $text-shade: $text-shade + 5;
  }
}
@mixin on-tablet-and-up {
  @media only screen and (min-width: ($mobile-screen-max-width + 1px)) {
    @content;
  }
}
@mixin on-laptop-and-up {
  @media only screen and (min-width: ($tablet-screen-max-width + 1px)) {
    @content;
  }
}
@mixin on-large-screen-and-up {
  @media only screen and (min-width: ($laptop-screen-max-width + 1px)) {
    @content;
  }
}
@mixin on-xlarge-screen-and-up {
  @media only screen and (min-width: ($large-screen-max-width + 1px)) {
    @content;
  }
}

/*
GLOBALS
*/
*,
*::before,
*::after {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  scroll-behavior: smooth;
  font-family: $font-family;
}

html {
  font-size: $text-mobile-size;
  // overflow: hidden;
}

body {
  color: $color-grey-1;
  line-height: $body-line-height;
  font-family: $font-family;
}

ul {
  margin: 0;
  padding-left: 0;
  list-style: none;
}

p {
  margin-bottom: 1.25em;
}

h1,
h2,
h3,
h4,
h5 {
  margin: 2.75rem 0 1rem;
  line-height: $heading-line-height;
}

h1 {
  margin-top: 0;
}

a {
  &:link,
  &:visited {
    -webkit-tap-highlight-color: transparent;
    color: $color-link;
    text-decoration: none;
    transition: all 0.2s;
  }

  &:hover,
  &:active {
    color: darken($color-link, 10);
  }
}

/*
TYPOGRAPHY ON ... & UP
*/
@include typescale($text-mobile-size, $type-scale-ratio);

@media only screen and (min-width: ($tablet-screen-max-width + 1px)) {
  html {
    font-size: $text-laptop-size;
  }
  @include typescale($text-laptop-size, $type-scale-ratio);
}

@media only screen and (min-width: ($laptop-screen-max-width + 1px)) {
  html {
    font-size: $text-large-size;
  }
  @include typescale($text-large-size, $type-scale-ratio);
}

/*
THEME
*/
$-common-colors: (
  "transparent": transparent,
  "white": #ffffff,
  "black": #000000,
);
@each $-name, $-value in $-common-colors {
  .#{$-name} {
    background-color: $-value !important;
  }
  .text-#{$-name} {
    color: $-value !important;
  }
}

$-theme-colors: (
  "primary": $color-primary,
  "secondary": $color-secondary,
  "tertiary": $color-tertiary,
);
@each $-name, $-value in $-theme-colors {
  .#{$-name} {
    background-color: $-value !important;
    @include shades($-value);
  }
  .text-#{$-name} {
    color: $-value !important;
    @include text-shades($-value);
  }
}

$-grey-colors: (
  "grey-1": $color-grey-1,
  "grey-2": $color-grey-2,
  "grey-3": $color-grey-3,
  "grey-4": $color-grey-4,
);
@each $-name, $-value in $-grey-colors {
  .#{$-name} {
    background-color: $-value !important;
  }
  .text-#{$-name} {
    color: $-value !important;
  }
}

/*
TEXT
*/
$-text-transforms: uppercase, lowercase, capitalize;
@each $-transform in $-text-transforms {
  .text-style-#{$-transform} {
    text-transform: $-transform;
  }
}

$-text-weights: (
  "thin": 200,
  "light": 300,
  "regular": 400,
  "medium": 500,
  "semibold": 600,
  "bold": 700,
  "extrabold": 800,
  "black": 900,
);
@each $-name, $-weight in $-text-weights {
  .text-weight-#{$-name} {
    font-weight: $-weight;
  }
}

$text-positions: left, center, right;
@each $position in $text-positions {
  .text-align-#{$position} {
    text-align: #{$position};
  }
}

.text-direction-vertical {
  display: inline-block;
  writing-mode: vertical-rl;
  transform: rotate(180deg);
  vertical-align: bottom;
  margin: 0;
}

/*
SPACING
*/
@for $-space from 0 to 7 {
  .ma-#{$-space} {
    margin: #{$-space}rem;
  }
  .pa-#{$-space} {
    padding: #{$-space}rem;
  }
}

// left and right
@for $-space from 0 to 7 {
  .mx-#{$-space} {
    margin-left: #{$-space}rem;
    margin-right: #{$-space}rem;
  }
  .px-#{$-space} {
    padding-left: #{$-space}rem;
    padding-right: #{$-space}rem;
  }
}

.mx-auto {
  margin: 0 auto;
}
.px-auto {
  padding: 0 auto;
}

// top and bottom
@for $-space from 0 to 7 {
  .my-#{$-space} {
    margin-top: #{$-space}rem;
    margin-bottom: #{$-space}rem;
  }
  .py-#{$-space} {
    padding-top: #{$-space}rem;
    padding-bottom: #{$-space}rem;
  }
}

.my-auto {
  margin: auto 0;
}
.py-auto {
  padding: auto 0;
}

// top right bottom left
$-space-values: (
  "t": top,
  "r": right,
  "b": bottom,
  "l": left,
);
@for $-space from 0 to 7 {
  @each $-name, $-value in $-space-values {
    .m#{$-name}-#{$-space} {
      margin-#{$-value}: #{$-space}rem;
    }
    .p#{$-name}-#{$-space} {
      padding-#{$-value}: #{$-space}rem;
    }
  }
}

@each $-name, $-value in $-space-values {
  .m#{$-name}-auto {
    margin-#{$-value}: auto;
  }
  .p#{$-name}-auto {
    padding-#{$-value}: auto;
  }
}

/*
DISPLAY
*/
$-display-values: (
  "d-none": none,
  "d-block": block,
  "d-inline": inline,
  "d-inline-block": inline-block,
  "d-flex": flex,
  "d-inline-flex": inline-flex,
);
@each $-name, $-value in $-display-values {
  .#{$-name} {
    display: $-value !important;

    // visibility
    @each $-other-name, $-other-value in $-display-values {
      @if $-other-name != $-name {
        &.#{$-other-name}-on-tablet-and-up {
          @include on-tablet-and-up {
            display: $-other-value !important;
          }
        }

        &.#{$-other-name}-on-laptop-and-up {
          @include on-laptop-and-up {
            display: $-other-value !important;
          }
        }

        &.#{$-other-name}-on-large-screen-and-up {
          @include on-large-screen-and-up {
            display: $-other-value !important;
          }
        }

        &.#{$-other-name}-on-xlarge-screen-and-up {
          @include on-xlarge-screen-and-up {
            display: $-other-value !important;
          }
        }
      }
    } // visibility end
  }
}

/*
FLEX
*/
.d-flex,
.d-inline-flex {
  $-flex-directions: row, column, row-reverse, column-reverse;
  @each $-value in $-flex-directions {
    &.flex-#{$-value} {
      flex-direction: $-value;
    }
  }

  $-flex-justify-values: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "space-between": space-between,
    "space-around": space-around,
  );
  @each $-name, $-value in $-flex-justify-values {
    &.justify-#{$-name} {
      justify-content: $-value;
    }
  }

  $-flex-align-values: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "baseline": baseline,
    "stretch": stretch,
  );
  @each $-name, $-value in $-flex-align-values {
    &.align-#{$-name} {
      align-items: $-value;
    }

    .align-self-#{$-name} {
      align-self: $-value;
    }
  }

  $-flex-align-content-values: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "space-between": space-between,
    "space-around": space-around,
    "stretch": stretch,
  );
  @each $-name, $-value in $-flex-align-content-values {
    &.align-content-#{$-name} {
      align-content: $-value;
    }
  }

  $-flex-wrap-values: (
    "wrap": wrap,
    "nowrap": nowrap,
    "wrap-reverse": wrap-reverse,
  );
  @each $-name, $-value in $-flex-wrap-values {
    &.flex-#{$-name} {
      flex-wrap: $-value;
    }
  }

  @for $-order from 0 to 13 {
    &.flex-order-#{$-order} {
      order: $-order;
    }
  }

  @for $-index from 0 to 2 {
    .flex-grow-#{$-index} {
      flex-grow: $-index;
    }
    .flex-shrink-#{$-index} {
      flex-shrink: $-index;
    }
  }
}
